clear
clc

% Import data from text file.
% Script for importing data from the following text file:
%
%    /gpfs/gsfs6/users/finnes/story_task/preprocessing/subjectwise_list_story_audioTRs.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/05/12 11:44:31

% Initialize variables.
filename = '/data/finnes/story_task/preprocessing/subjectwise_list_story_audioTRs.txt';
delimiter = '\t';

% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%[^\n\r]';

% Open the text file.
fileID = fopen(filename,'r');

% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string',  'ReturnOnError', false);

% Close the text file.
fclose(fileID);

% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

% Converts text in the input cell array to numbers. Replaced non-numeric
% text with NaN.
rawData = dataArray{1};
for row=1:size(rawData, 1)
    % Create a regular expression to detect and remove non-numeric prefixes and
    % suffixes.
    regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
    try
        result = regexp(rawData(row), regexstr, 'names');
        numbers = result.numbers;
        
        % Detected commas in non-thousand locations.
        invalidThousandsSeparator = false;
        if numbers.contains(',')
            thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
            if isempty(regexp(numbers, thousandsRegExp, 'once'))
                numbers = NaN;
                invalidThousandsSeparator = true;
            end
        end
        % Convert numeric text to numbers.
        if ~invalidThousandsSeparator
            numbers = textscan(char(strrep(numbers, ',', '')), '%f');
            numericData(row, 1) = numbers{1};
            raw{row, 1} = numbers{1};
        end
    catch
        raw{row, 1} = rawData{row};
    end
end


% Split data into numeric and string columns.
rawNumericColumns = raw(:, 1);
rawStringColumns = string(raw(:, 2));


% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
idx = (rawStringColumns(:, 1) == "<undefined>");
rawStringColumns(idx, 1) = "";

% Create output variable
subjectwiseliststoryaudioTRs = table;
subjectwiseliststoryaudioTRs.tb_num = cell2mat(rawNumericColumns(:, 1));
subjectwiseliststoryaudioTRs.audioTRs = categorical(rawStringColumns(:, 1));

% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp rawNumericColumns rawStringColumns idx;

% Use the table generated above to load the correct TRs from the enorm.1D files

% get tb_nums 

for sub = 1:length(num2str(subjectwiseliststoryaudioTRs.tb_num))
    sub_name = ['tb',num2str(subjectwiseliststoryaudioTRs.tb_num(sub))];
    filename = ['/data/finnes/story_task/',sub_name,'/',sub_name,'_pass1.results/motion_',sub_name,'_pass1_enorm.1D'];
    
    mot_vct = dlmread(filename);
    
    TR_inds = char(subjectwiseliststoryaudioTRs.audioTRs(sub));
    TR_inds = str2num(regexprep(TR_inds,'-',':'));
    
    story_mot(:,sub) = mot_vct(TR_inds');
end
    
    




